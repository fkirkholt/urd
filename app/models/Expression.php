<?php

namespace URD\models;

class Expression {

    function __construct($platform, $expr) {
        $this->platform = $platform;
        $this->expr = $expr;
    }

    /**
     * Concatenates expressions and treats nulls as ''
     */
    public function concat($expressions)
    {
        switch ($this->platform) {
        case 'mysql':
            return "concat_ws('', " . implode(',', $expressions) . ')';
        case 'oracle':
        case 'sqlite':
            return implode(' || ', $expressions);
        }
    }

    /**
     * Concatenates expressions with separator and treats nulls as ''
     */
    public function concat_ws($sep, $expressions)
    {
        switch ($this->platform) {
        case 'mysql':
            return "concat_ws('$sep'," . implode(',', $expressions) . ")";
        case 'oracle':
        case 'sqlite':
            return implode(" || '$sep' || ", $expressions);
        }
    }

    public function autoincrement() {
        switch ($this->platform) {
        case 'mysql':
            return "AUTO_INCREMENT";
        case 'oracle':
            return "GENERATED BY DEFAULT ON NULL AS IDENTITY";
        default:
            throw new \Exception("Auto increment not implemented for this database");
        }

    }

    public function to_native_type($size)
    {
        if ($this->platform == 'mysql') {
            switch ($this->expr) {
            case 'string':
                return "varchar($size)";
            case 'integer':
                return "int($size)";
            case 'float':
                return "float($size)";
            case 'date':
                return 'date';
            case 'boolean':
                return 'tinyint(1)';
            default:
                throw new \Exception("type $this->expr not recognized");
            }
        } else {
            throw new \Exception("type conversion for $this->platform not implemented");
        }
    }

    public function to_urd_type($column)
    {
        $type = (object) ['name' => 'undefined', 'size' => $column->size];
        if ($this->platform == 'mysql') {
            switch (strtolower($column->nativetype)) {
            case 'char':
            case 'varchar':
            case 'text':
                $type->name = 'string';
                return $type;
            case 'longtext':
                $type->name = 'string';
                $type->size = 'big';
            case 'mediumtext':
                $type->name = 'string';
                $type->size = 'medium';
                return $type;
            case 'int':
            case 'tinyint':
            case 'smallint':
                $type->name = 'integer';
                return $type;
            case 'bigint':
                $type->name = 'integer';
                $type->size = 'big';
                return $type;
            case 'float':
            case 'double':
            case 'decimal':
                $type->name = 'float';
                return $type;
            case 'date':
            case 'datetime':
            case 'timestamp':
                $type->name = 'date';
                return $type;
            case 'blob':
                $type->name = 'binary';
                return $type;
            case 'mediumblob':
                $type->name = 'binary';
                $type->size = 'medium';
                return $type;
            case 'longblob':
                $type->name = 'binary';
                $type->size = 'big';
                return $type;
            default:
                throw new \Exception("type $column->nativetype not recognized");
            }
        } else if ($this->platform == 'oracle') {
            switch (strtolower($this->expr)) {
            case 'char':
            case 'varchar2':
                return 'string';
            case 'number':
                return 'integer';
            case 'date':
            case 'timestamp':
                return 'date';
            default:
                throw new \Exception("type $this->expr not recognized");
            }
        } else {
            switch (strtolower($this->expr)) {
            case 'varchar':
            case 'text':
                return 'string';
            case 'integer':
                return 'integer';
            default:
                throw new \Exception("type $this->expr not recognized");
            }
        }
    }

    public function range($limit, $offset = 0) {
        if (in_array($this->platform, ['mysql', 'sqlite'])) {
            $this->expr = $this->expr . " LIMIT $limit OFFSET $offset";
        } elseif ($this->platform == 'oracle') {
            $this->expr = $this->expr . " OFFSET $offset ROWS FETCH NEXT $limit ROWS ONLY";
        }

        return $this;
    }


    public function replace_vars($sql) {
        $sql = str_replace('$user_id', $_SESSION['user_id'], $sql);
        $sql = str_replace('$user_name', $_SESSION['user_name'], $sql);
        $sql = str_replace('$date', date('Y-m-d'), $sql);
        $sql = str_replace('$timestamp', date('Y-m-d H:i:s'), $sql);
        return $sql;
    }

    public function __toString() {
        return $this->expr;
    }

}
